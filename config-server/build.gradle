buildscript {
	ext {
		springBootVersion='1.5.3.RELEASE'
		jarName='config-server'
		versionName = '0.0.1'
		gradleDockerVersion = '1.2'
	}
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
	}
}

task createWrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'


version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility=1.8

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE'
    }
}

repositories {
	mavenCentral()
}

group ='manojpathak'
mainClassName='com.manoj.microservice.config.ConfigApplication'

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
    compile("org.springframework.cloud:spring-cloud-config-server")
}


jar {
    baseName = "${project.jarName}"
    version =  "${project.versionName}"
}

run{
    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=4100,suspend=n','-Dspring.profiles.active=default']
}

/*
* This task builds the docker image by copying the output of the "jar" gradle command
* and moving it to the "build/docker" directory which is used as the staging directory
* by the docker gradle plugin. We then build the docker image by invoking the appropriate
* Dockerfile.
*/
task buildDocker(type: Docker, dependsOn: build) {
	push = false
	applicationName = jar.baseName
	tagVersion = jar.version
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		// Copy the built fat jar to the Docker plugin staging directory
		copy {
			from jar
			into stageDir
		}
		// Copy the run.sh file to the Docker plugin staging directory
		copy {
			from "${project.buildDir}/resources/main/run.sh"
			into stageDir
		}
	}
}